#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('wallet-extension:server');
var http = require('http');
var https = require('https');
var fs = require('fs');
const conn = require('./connect');
let connection;
/**
 * Get port from environment and store in Express.
 */

/*var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);*/

/**
 * Create HTTP server.
 */



var options = {
    key: fs.readFileSync(process.env.KEY, 'utf8'),
    cert: fs.readFileSync(process.env.CERT, 'utf8')
};


var server_http = http.createServer(app);
var server_https = https.createServer(options, app);
//var socket = https.createServer(options, app);
var passportConfig = require('./Services/passport');

/**
 * Listen on provided port, on all network interfaces.
 */

server_http.listen(80);
server_http.on('error', onError);
server_http.on('listening', () => console.log('start listen server port :' + 80));

server_https.listen(process.env.PORT);
server_https.on('error', onError);
server_https.on('listening', async () => {
    console.log('start listen server port :' + process.env.PORT);
    connection = await conn.createConn();
    passportConfig();
});


//soket
//const socketio = require('socket.io');
var twitter_reverse = require('../routes/twitter/twitter_reverse');
//var auth_twitter = require('./routes/auth_twitter');
var auth_vk = require('../routes/auth_vk');
var check = require('../routes/check');
var twitter = require('../routes/twitter/twitter');
var wallet_create = require('../routes/wallet/create');
var wallet_create_by_pk = require('../routes/wallet/setPk');
var get_user = require('../routes/user/get');
var get_user_friends = require('../routes/user/getFriends');
var get_user_address = require('../routes/user/getUserAddress');
var send_eth = require('../routes/wallet/sendEth');

//const io = socketio(socket);

/*io.sockets.on('connection', function (socket) {
    console.log('client connect');
    io.sockets.emit('twitter', 'test1');
    /!*socket.on('echo', function (data) {
        io.sockets.emit('message', data);
    });*!/
});*/

//app.set('socketio', io);


//app.use('/auth_vk', auth_vk);
app.use('/check', check);

//auth
app.use('/', twitter_reverse);

//wallet
app.use('/wallet_create', wallet_create);
app.use('/wallet_create_by_pk', wallet_create_by_pk);
app.use('/user/get', get_user);
app.use('/user/get_user_friends', get_user_friends);
app.use('/user/get_user_address', get_user_address);
app.use('/wallet/send_eth', send_eth);

// catch 404 and forward to error handler
app.use(function (req, res, next) {
    next(createError(404));
});

// error handler
app.use(function (err, req, res, next) {
    // set locals, only providing error in development
    res.locals.message = err.message;
    res.locals.error = req.app.get('env') === 'development' ? err : {};

    // render the error page
    res.status(err.status || 500);
    res.render('error');
});

/*socket.listen(8080, () => {
    console.log('listening... 8080')
});*/


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}


