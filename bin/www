#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('wallet-extension:server');
var http = require('http');
var https = require('https');
var fs = require('fs');
const conn = require('./connect');
let connection;
/**
 * Get port from environment and store in Express.
 */

/*var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);*/

/**
 * Create HTTP server.
 */



var options = {
    key: fs.readFileSync(process.env.KEY, 'utf8'),
    cert: fs.readFileSync(process.env.CERT, 'utf8')
};


var server_http = http.createServer(app);
var server_https = https.createServer(options, app);

/**
 * Listen on provided port, on all network interfaces.
 */

server_http.listen(80);
server_http.on('error', onError);
server_http.on('listening', () => console.log('start listen server port :' + 80));

server_https.listen(process.env.PORT);
server_https.on('error', onError);
server_https.on('listening', () => {
    console.log('start listen server port :' + process.env.PORT);
    connection = await conn.createConn();
});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}


